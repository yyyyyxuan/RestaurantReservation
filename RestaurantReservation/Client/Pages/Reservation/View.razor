@page "/reservation/view/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager
@attribute [Authorize]


@using System.Security.Claims
@using RestaurantReservation.Client.Model
@inject AuthenticationStateProvider AuthenticationStateProvider
<a href="reservation" class="btn btn-secondary">
    <span class="oi oi oi-arrow-left"></span>
    Back to reservations
</a>
<br />
<FormComponent reservation="reservation" Disabled="true" />


@code {
    [Parameter] public int id { get; set; }
    Reservation reservation = new Reservation();
    private List<AppUser> AppUsers;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    private string _currentUserId;
    private string _currentUserRole;
    private string _currentUserName;
    protected async override Task OnParametersSetAsync()
    {
        reservation = await
        _client.GetFromJsonAsync<Reservation>($"{Endpoints.ReservationEndpoint}/{id}");

        AppUsers = await
        _client.GetFromJsonAsync<List<AppUser>>($"{Endpoints.AccountsEndpoint}");
        var authState = await
        AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            _claims = user.Claims;
            _currentUserName = user.Identity.Name;
            if (_claims.Count() > 0)
            {
                foreach (var claim in _claims)
                {
                    if (claim.Type == "sub")
                    {
                        _currentUserId = claim.Value;
                        continue;
                    }
                }
            }
        }
        if (_currentUserId != String.Empty)
        {
            _currentUserRole = await
            _client.GetStringAsync($"{Endpoints.AccountsEndpoint}/{_currentUserId}");
        }
    }
}
