// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestaurantReservation.Server.Data;

namespace RestaurantReservation.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "bd2bcf0c-20db-474f-8407-5a6b159518bb",
                            ConcurrencyStamp = "c93ca134-e484-469e-a57a-cb975e16927b",
                            Name = "CustomerUser",
                            NormalizedName = "CUSTOMERUSER"
                        },
                        new
                        {
                            Id = "ad2bcf0c-20db-474f-8407-5a6b159518ba",
                            ConcurrencyStamp = "1134e23c-a0f2-4bbf-9794-9af94de68af9",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "e660c1e1-9327-4b4a-a449-da5bb9547d0d",
                            ConcurrencyStamp = "0089f39c-ce99-46d5-afb3-cff206a22959",
                            Name = "RestaurantUser",
                            NormalizedName = "RESTAURANTUSER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            RoleId = "ad2bcf0c-20db-474f-8407-5a6b159518ba"
                        },
                        new
                        {
                            UserId = "ce2cf924-58d3-427f-813a-a6de6bc7400d",
                            RoleId = "bd2bcf0c-20db-474f-8407-5a6b159518bb"
                        },
                        new
                        {
                            UserId = "12db73f8-0dd6-493b-b15d-6701880bf36e",
                            RoleId = "e660c1e1-9327-4b4a-a449-da5bb9547d0d"
                        },
                        new
                        {
                            UserId = "cdc39beb-763d-4764-8086-d3d2790f98fd",
                            RoleId = "e660c1e1-9327-4b4a-a449-da5bb9547d0d"
                        },
                        new
                        {
                            UserId = "d2e65d50-0175-40ae-b91d-449484f6623a",
                            RoleId = "e660c1e1-9327-4b4a-a449-da5bb9547d0d"
                        },
                        new
                        {
                            UserId = "86c52720-1b0d-4f59-b660-9d04357e8653",
                            RoleId = "e660c1e1-9327-4b4a-a449-da5bb9547d0d"
                        },
                        new
                        {
                            UserId = "d5de43ef-33a1-48c2-ac88-b2d9b4ef6d49",
                            RoleId = "bd2bcf0c-20db-474f-8407-5a6b159518bb"
                        },
                        new
                        {
                            UserId = "63320eb6-1c7b-439e-9e4f-99b47a240472",
                            RoleId = "bd2bcf0c-20db-474f-8407-5a6b159518bb"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RestaurantReservation.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3374837f-b5dc-4545-ab32-f5200dc83b7d",
                            Email = "admin@localhost.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJzYxGI6ZhkRKwSA3dxPqOOSwFgmn+5/geTswSZVjC1aUY5ys+6znpmn39QoWtjxJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4aef2571-29cb-4ad5-bc39-736729eb4885",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "12db73f8-0dd6-493b-b15d-6701880bf36e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92c53f02-3c91-41f6-911d-32e98e80b28b",
                            Email = "restaurant@localhost.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RESTAURANT@LOCALHOST.COM",
                            NormalizedUserName = "RESTAURANT@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMWCMMPlpTW3UnOARLDx+EmfAyievaqQKMtetMpYIL1GMVLX4CleXQ1MoEL19s3I9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9dea022d-cf5d-431c-a272-2eb8d6107181",
                            TwoFactorEnabled = false,
                            UserName = "restauranttestuser"
                        },
                        new
                        {
                            Id = "ce2cf924-58d3-427f-813a-a6de6bc7400d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97f47a79-11f3-4256-8f5d-5c08103bfdc1",
                            Email = "customer@localhost.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@LOCALHOST.COM",
                            NormalizedUserName = "CUSTOMER@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFVZAHMBLt6aAU5ULTRXGB+ElKJ/EIUMtYB93oNmdcaSlqrvlEJ7C7UtoxgwR+uX/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4eae867f-e261-431e-9c1b-3f2725d2e244",
                            TwoFactorEnabled = false,
                            UserName = "customertestuser"
                        },
                        new
                        {
                            Id = "cdc39beb-763d-4764-8086-d3d2790f98fd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b1ec78a7-d0ad-4b50-9e03-a657fdacf57b",
                            Email = "kfc@localhost.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KFC@LOCALHOST.COM",
                            NormalizedUserName = "KFC@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOtOjKuNMGSMWRuM4VFixY731pX+JwXm/KPRFcodHTukExy4Qzn3MP9yBhxg2RowDw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d4d04049-105e-4ece-9141-55ea06ee1f1e",
                            TwoFactorEnabled = false,
                            UserName = "KFC"
                        },
                        new
                        {
                            Id = "d2e65d50-0175-40ae-b91d-449484f6623a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f14cea6a-053f-4a32-95b6-c464f42b5cc9",
                            Email = "macs@localhost.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MACS@LOCALHOST.COM",
                            NormalizedUserName = "MACS@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFsrLMb4U5FMfQYXdi/Gjt+OpAmRAwMyWC4t89OadOeGwQuQGiZQ4LIycl/MnNc1jQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "17aa677e-a1cc-4179-a41a-3b34bd71168f",
                            TwoFactorEnabled = false,
                            UserName = "MACS"
                        },
                        new
                        {
                            Id = "86c52720-1b0d-4f59-b660-9d04357e8653",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e75fd51e-be80-4887-9ff7-75db9dab46f3",
                            Email = "subway@localhost.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUBWAY@LOCALHOST.COM",
                            NormalizedUserName = "SUBWAY@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJeWCSyLuJRhBeS5nHtJB1M6fmRRaEhvdfo/l/j6+kfc8JASXV6AxF+BCq8ZPACWUQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0d269921-fbb7-4cb7-8fb2-44f9c0dfd5c6",
                            TwoFactorEnabled = false,
                            UserName = "Subway"
                        },
                        new
                        {
                            Id = "d5de43ef-33a1-48c2-ac88-b2d9b4ef6d49",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "49fed972-831e-4776-adb9-98a596574840",
                            Email = "John@localhost.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN@LOCALHOST.COM",
                            NormalizedUserName = "JOHN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJiq2uInSpG84+0xqkUObRzfdXmDq5RZITd93An/dzU9KXN/b3xs6c3saFr3hQAjtQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d40194e5-9780-4ecd-bdb1-617fdc219db7",
                            TwoFactorEnabled = false,
                            UserName = "John"
                        },
                        new
                        {
                            Id = "63320eb6-1c7b-439e-9e4f-99b47a240472",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fef9353e-f6a7-44f7-88de-2889366d50f0",
                            Email = "Peter@localhost.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETER@LOCALHOST.COM",
                            NormalizedUserName = "PETER@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE3zt7KbFqZsy39SpglO9SguvI+KTb9Sl0zvMfkAnZsdxpKfJR7dj6ywvaSYSnrdnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "045d423d-2796-48bf-a3a0-da5f6b390a42",
                            TwoFactorEnabled = false,
                            UserName = "Peter"
                        });
                });

            modelBuilder.Entity("RestaurantReservation.Shared.Domain.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Pax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("RestaurantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeSlot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 7, 8, 53, 2, 143, DateTimeKind.Local).AddTicks(7691),
                            DateUpdated = new DateTime(2023, 2, 7, 8, 53, 2, 143, DateTimeKind.Local).AddTicks(7956),
                            Pax = "3",
                            ReservationDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantId = 2,
                            RestaurantName = "Kentucky Fried Chicken",
                            TimeSlot = "1400-1600",
                            UpdatedBy = "System",
                            UserId = "d5de43ef-33a1-48c2-ac88-b2d9b4ef6d49",
                            UserName = "John"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 7, 8, 53, 2, 143, DateTimeKind.Local).AddTicks(9074),
                            DateUpdated = new DateTime(2023, 2, 7, 8, 53, 2, 143, DateTimeKind.Local).AddTicks(9076),
                            Pax = "4",
                            ReservationDate = new DateTime(2023, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantId = 3,
                            RestaurantName = "Mac Donalds",
                            TimeSlot = "1200-1400",
                            UpdatedBy = "System",
                            UserId = "63320eb6-1c7b-439e-9e4f-99b47a240472",
                            UserName = "Peter"
                        });
                });

            modelBuilder.Entity("RestaurantReservation.Shared.Domain.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Food",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 7, 8, 53, 2, 144, DateTimeKind.Local).AddTicks(4253),
                            DateUpdated = new DateTime(2023, 2, 7, 8, 53, 2, 144, DateTimeKind.Local).AddTicks(4259),
                            Description = "We sell food",
                            Name = "Admin's Restaurant",
                            UpdatedBy = "System",
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Fast Food",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 7, 8, 53, 2, 144, DateTimeKind.Local).AddTicks(4597),
                            DateUpdated = new DateTime(2023, 2, 7, 8, 53, 2, 144, DateTimeKind.Local).AddTicks(4601),
                            Description = "We sell fried chicken",
                            Name = "Kentucky Fried Chicken",
                            UpdatedBy = "System",
                            UserId = "cdc39beb-763d-4764-8086-d3d2790f98fd",
                            UserName = "KFC"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Fast Food",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 7, 8, 53, 2, 144, DateTimeKind.Local).AddTicks(4607),
                            DateUpdated = new DateTime(2023, 2, 7, 8, 53, 2, 144, DateTimeKind.Local).AddTicks(4607),
                            Description = "We sell burgers and fries",
                            Name = "Mac Donalds",
                            UpdatedBy = "System",
                            UserId = "d2e65d50-0175-40ae-b91d-449484f6623a",
                            UserName = "MACS"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Fast Food",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 7, 8, 53, 2, 144, DateTimeKind.Local).AddTicks(4610),
                            DateUpdated = new DateTime(2023, 2, 7, 8, 53, 2, 144, DateTimeKind.Local).AddTicks(4611),
                            Description = "We sell sandwiches",
                            Name = "Subway",
                            UpdatedBy = "System",
                            UserId = "86c52720-1b0d-4f59-b660-9d04357e8653",
                            UserName = "Subway"
                        });
                });

            modelBuilder.Entity("RestaurantReservation.Shared.Domain.Spotlight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("SpotlightHeader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Spotlights");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 7, 8, 53, 2, 145, DateTimeKind.Local).AddTicks(1268),
                            DateUpdated = new DateTime(2023, 2, 7, 8, 53, 2, 145, DateTimeKind.Local).AddTicks(1275),
                            SpotlightHeader = "Fast Food",
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("RestaurantReservation.Shared.Domain.SpotlightItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("SpotlightId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("SpotlightId");

                    b.ToTable("SpotlightItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 7, 8, 53, 2, 144, DateTimeKind.Local).AddTicks(8820),
                            DateUpdated = new DateTime(2023, 2, 7, 8, 53, 2, 144, DateTimeKind.Local).AddTicks(8825),
                            ExpireDate = new DateTime(2023, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantId = 2,
                            SpotlightId = 1,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 7, 8, 53, 2, 144, DateTimeKind.Local).AddTicks(8931),
                            DateUpdated = new DateTime(2023, 2, 7, 8, 53, 2, 144, DateTimeKind.Local).AddTicks(8932),
                            ExpireDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantId = 3,
                            SpotlightId = 1,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 7, 8, 53, 2, 144, DateTimeKind.Local).AddTicks(8938),
                            DateUpdated = new DateTime(2023, 2, 7, 8, 53, 2, 144, DateTimeKind.Local).AddTicks(8939),
                            ExpireDate = new DateTime(2023, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantId = 4,
                            SpotlightId = 1,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RestaurantReservation.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RestaurantReservation.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantReservation.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RestaurantReservation.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RestaurantReservation.Shared.Domain.Reservation", b =>
                {
                    b.HasOne("RestaurantReservation.Shared.Domain.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestaurantReservation.Shared.Domain.SpotlightItem", b =>
                {
                    b.HasOne("RestaurantReservation.Shared.Domain.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantReservation.Shared.Domain.Spotlight", "Spotlight")
                        .WithMany()
                        .HasForeignKey("SpotlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("Spotlight");
                });
#pragma warning restore 612, 618
        }
    }
}
